{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"alphavantage-java \u00b6 This library was created to provide a fluent interface for accessing the AlphaVantage API with Java. Getting Started \u00b6 To get started using this library, make sure to get an API Key from Alphavantage's website. Add the library as a dependency to your java/android project Gradle Installation \u00b6 allprojects { repositories { ... maven { url 'https://jitpack.io' } } } dependencies { ... implementation 'com.github.crazzyghost:alphavantage-java:x.y.z' } Maven Installation \u00b6 <repositories> ... <repository> <id> jitpack.io </id> <url> https://jitpack.io </url> </repository> ... </repositories> <dependencies> ... <dependency> <groupId> com.github.crazzyghost </groupId> <artifactId> alphavantage-java </artifactId> <version> x.y.z </version> </dependency> ... </dependencies> Quick Usage Guide \u00b6 These five steps summarize how to access data using this library Step 1. config ure the wrapper Step 2. Select a category Step 3. Set the parameters for the selected category Step 4. (Optional) Add response callbacks Step 5. fetch results 1. Config uring the wrapper \u00b6 Access to the API is through the AlphaVantage Singleton which is accessed using the static api() method of the class. Tip Initialize the singleton with a Config instance once through out your apps lifetime. Java Config cfg = Config . builder () . key ( \"#&ALPHA10100DEMOKEY\" ) . timeOut ( 10 ) . build (); Kotlin var cfg = Config . builder () . key ( \"#&ALPHA10100DEMOKEY\" ) . timeOut ( 10 ) . build () Use the config object to initialize the api instance. You will use this object to set your api key and configure the http client. Warning Using the wrapper without setting a config or a config key will throw an exception. Java AlphaVantage . api (). init ( cfg ); Kotlin AlphaVantage . api (). init ( cfg ) That's it! We're good to go. 2. Selecting a category \u00b6 Here, we choose which data category/endpoint we want to access Info Each of category is exposed through a method call in the instantiated wrapper. Category Method Stock Time Series Data .timeSeries() Forex Rate Data .forex() Exchange Rate Data .exchangeRate() Digital Currency Data .crypto() Technical Indicator Data .indicator() Sector Performance Data .sector() Fundamental Data .fundamentalData() For example, to select the Stock Time Series: Java AlphaVantage . api () . timeSeries () Kotlin AlphaVantage . api () . timeSeries () 3. Setting the parameters for the selected category \u00b6 To set the api request parameters, call the appopriate parameter methods. For instance for the function parameter function you call daily() for the TIME_SERIES_DAILY function, intraday() for the TIME_SERIES_INTRADAY , and so on. Let's select the TIME_SERIES_INTRADAY function Java AlphaVantage . api () . timeSeries () . intraday () ... Kotlin AlphaVantage . api () . timeSeries () . intraday () ... Tip Start setting parameters by calling an appropriate function method in the selected category 4. Adding response callbacks \u00b6 To handle responses add the onSuccess() or onFailure() async callbacks. Starting from version 1.5.0, this is an optional step. Java public void handleSuccess ( TimeSeriesResponse response ) { plotGraph ( reponse . getStockUnits ()); } public void handleFailure ( AlphaVantageException error ) { /* uh-oh! */ } AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ( e -> handleSuccess ( e )) . onFailure ( e -> hanldeFailure ( e )) ... Kotlin fun handleSuccess ( response : TimeSeriesResponse ) { plotGraph ( reponse . getStockUnits ()) } fun handleFailure ( error : AlphaVantageException ) { /* uh-oh! */ } AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ({ e -> handleSuccess ( e ) }) . onFailure ({ e -> hanldeFailure ( e ) }) ... Info Callbacks are optional, you can choose to handle either or both 5. fetch results \u00b6 When you are okay with setting the parameters call the fetch() method. Simple! Java AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ( e -> handleSuccess ( e )) . onFailure ( e -> hanldeFailure ( e )) . fetch (); Kotlin AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ({ e -> handleSuccess ( e ) }) . onFailure ({ e -> hanldeFailure ( e ) }) . fetch () From v1.5.0 up, you can also use the synchronous fetch method by calling the fetchSync() method without callback handlers. Java TimeSeriesResponse response = AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . fetchSync (); Kotlin TimeSeriesResponse response = AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . fetchSync () Releases \u00b6 Release history can be found in the change log . License \u00b6 MIT License Copyright (c) 2020 Sylvester Sefa-Yeboah Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Overview"},{"location":"#alphavantage-java","text":"This library was created to provide a fluent interface for accessing the AlphaVantage API with Java.","title":"alphavantage-java"},{"location":"#getting-started","text":"To get started using this library, make sure to get an API Key from Alphavantage's website. Add the library as a dependency to your java/android project","title":"Getting Started"},{"location":"#gradle-installation","text":"allprojects { repositories { ... maven { url 'https://jitpack.io' } } } dependencies { ... implementation 'com.github.crazzyghost:alphavantage-java:x.y.z' }","title":"Gradle Installation"},{"location":"#maven-installation","text":"<repositories> ... <repository> <id> jitpack.io </id> <url> https://jitpack.io </url> </repository> ... </repositories> <dependencies> ... <dependency> <groupId> com.github.crazzyghost </groupId> <artifactId> alphavantage-java </artifactId> <version> x.y.z </version> </dependency> ... </dependencies>","title":"Maven Installation"},{"location":"#quick-usage-guide","text":"These five steps summarize how to access data using this library Step 1. config ure the wrapper Step 2. Select a category Step 3. Set the parameters for the selected category Step 4. (Optional) Add response callbacks Step 5. fetch results","title":"Quick Usage Guide"},{"location":"#1-configuring-the-wrapper","text":"Access to the API is through the AlphaVantage Singleton which is accessed using the static api() method of the class. Tip Initialize the singleton with a Config instance once through out your apps lifetime. Java Config cfg = Config . builder () . key ( \"#&ALPHA10100DEMOKEY\" ) . timeOut ( 10 ) . build (); Kotlin var cfg = Config . builder () . key ( \"#&ALPHA10100DEMOKEY\" ) . timeOut ( 10 ) . build () Use the config object to initialize the api instance. You will use this object to set your api key and configure the http client. Warning Using the wrapper without setting a config or a config key will throw an exception. Java AlphaVantage . api (). init ( cfg ); Kotlin AlphaVantage . api (). init ( cfg ) That's it! We're good to go.","title":"1. Configuring the wrapper"},{"location":"#2-selecting-a-category","text":"Here, we choose which data category/endpoint we want to access Info Each of category is exposed through a method call in the instantiated wrapper. Category Method Stock Time Series Data .timeSeries() Forex Rate Data .forex() Exchange Rate Data .exchangeRate() Digital Currency Data .crypto() Technical Indicator Data .indicator() Sector Performance Data .sector() Fundamental Data .fundamentalData() For example, to select the Stock Time Series: Java AlphaVantage . api () . timeSeries () Kotlin AlphaVantage . api () . timeSeries ()","title":"2. Selecting a category"},{"location":"#3-setting-the-parameters-for-the-selected-category","text":"To set the api request parameters, call the appopriate parameter methods. For instance for the function parameter function you call daily() for the TIME_SERIES_DAILY function, intraday() for the TIME_SERIES_INTRADAY , and so on. Let's select the TIME_SERIES_INTRADAY function Java AlphaVantage . api () . timeSeries () . intraday () ... Kotlin AlphaVantage . api () . timeSeries () . intraday () ... Tip Start setting parameters by calling an appropriate function method in the selected category","title":"3. Setting the parameters for the selected category"},{"location":"#4-adding-response-callbacks","text":"To handle responses add the onSuccess() or onFailure() async callbacks. Starting from version 1.5.0, this is an optional step. Java public void handleSuccess ( TimeSeriesResponse response ) { plotGraph ( reponse . getStockUnits ()); } public void handleFailure ( AlphaVantageException error ) { /* uh-oh! */ } AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ( e -> handleSuccess ( e )) . onFailure ( e -> hanldeFailure ( e )) ... Kotlin fun handleSuccess ( response : TimeSeriesResponse ) { plotGraph ( reponse . getStockUnits ()) } fun handleFailure ( error : AlphaVantageException ) { /* uh-oh! */ } AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ({ e -> handleSuccess ( e ) }) . onFailure ({ e -> hanldeFailure ( e ) }) ... Info Callbacks are optional, you can choose to handle either or both","title":"4. Adding response callbacks"},{"location":"#5-fetch-results","text":"When you are okay with setting the parameters call the fetch() method. Simple! Java AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ( e -> handleSuccess ( e )) . onFailure ( e -> hanldeFailure ( e )) . fetch (); Kotlin AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . onSuccess ({ e -> handleSuccess ( e ) }) . onFailure ({ e -> hanldeFailure ( e ) }) . fetch () From v1.5.0 up, you can also use the synchronous fetch method by calling the fetchSync() method without callback handlers. Java TimeSeriesResponse response = AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . fetchSync (); Kotlin TimeSeriesResponse response = AlphaVantage . api () . timeSeries () . intraday () . forSymbol ( \"IBM\" ) . interval ( Interval . FIVE_MIN ) . outputSize ( OutputSize . FULL ) . fetchSync ()","title":"5.  fetch results"},{"location":"#releases","text":"Release history can be found in the change log .","title":"Releases"},{"location":"#license","text":"MIT License Copyright (c) 2020 Sylvester Sefa-Yeboah Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 v1.6.0 - 14-11-2021 \u00b6 New: Support for fundamental data v1.5.0 - 11-01-2021 \u00b6 New: Support for synchronous requests v1.4.2 - 20-10-2020 \u00b6 Missing crypto unit date v1.4.1 - 25-07-2020 \u00b6 Fix: Array index out of bounds exception caused by empty API response v1.4.0 - 13-06-2020 \u00b6 New: Support for Sector Performances v1.3.2 - 21-05-2020 \u00b6 Fix: Maven build issue v1.3.1 - 21-05-2020 \u00b6 Fix: Multiple async requests for enpoint bug v1.3.0 - 09-05-2020 \u00b6 New: Support for Quote Endpoint Changed: RequestHelper to RequestProxy for TimeSeries Fix: Time Series IntradayRequest interval bug v1.2.1 - 07-05-2020 \u00b6 Fix: Forex IntradayRequest interval bug v1.2.0 - 05-05-2020 \u00b6 New: Support for crypto currency Health Index v1.1.1 - 04-05-2020 \u00b6 New: Bid Rates and Ask Rates for Exchange Rates Fix: Exchange Rates response data access v1.1.0 - 04-05-2020 \u00b6 New: Support for Technical Indicators v1.0.2 - 24-04-2020 \u00b6 Fix: API url parameter bug v1.0.1 - 17-04-2020 \u00b6 Fix: Incorrect mapping of time series data Fix: Getters for Crypto and Forex Units Change: Rename crypto subpackages v1.0.0 - 23-10-2019 \u00b6 New: Support for Time Series Data New:Support for Forex Data New:Support for Crypto Currencies New:Support for Exchange Rates New:Tests for Time Series","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v160-14-11-2021","text":"New: Support for fundamental data","title":"v1.6.0 - 14-11-2021"},{"location":"changelog/#v150-11-01-2021","text":"New: Support for synchronous requests","title":"v1.5.0 - 11-01-2021"},{"location":"changelog/#v142-20-10-2020","text":"Missing crypto unit date","title":"v1.4.2 - 20-10-2020"},{"location":"changelog/#v141-25-07-2020","text":"Fix: Array index out of bounds exception caused by empty API response","title":"v1.4.1 - 25-07-2020"},{"location":"changelog/#v140-13-06-2020","text":"New: Support for Sector Performances","title":"v1.4.0 - 13-06-2020"},{"location":"changelog/#v132-21-05-2020","text":"Fix: Maven build issue","title":"v1.3.2 - 21-05-2020"},{"location":"changelog/#v131-21-05-2020","text":"Fix: Multiple async requests for enpoint bug","title":"v1.3.1 - 21-05-2020"},{"location":"changelog/#v130-09-05-2020","text":"New: Support for Quote Endpoint Changed: RequestHelper to RequestProxy for TimeSeries Fix: Time Series IntradayRequest interval bug","title":"v1.3.0 - 09-05-2020"},{"location":"changelog/#v121-07-05-2020","text":"Fix: Forex IntradayRequest interval bug","title":"v1.2.1 - 07-05-2020"},{"location":"changelog/#v120-05-05-2020","text":"New: Support for crypto currency Health Index","title":"v1.2.0 - 05-05-2020"},{"location":"changelog/#v111-04-05-2020","text":"New: Bid Rates and Ask Rates for Exchange Rates Fix: Exchange Rates response data access","title":"v1.1.1 - 04-05-2020"},{"location":"changelog/#v110-04-05-2020","text":"New: Support for Technical Indicators","title":"v1.1.0 - 04-05-2020"},{"location":"changelog/#v102-24-04-2020","text":"Fix: API url parameter bug","title":"v1.0.2 - 24-04-2020"},{"location":"changelog/#v101-17-04-2020","text":"Fix: Incorrect mapping of time series data Fix: Getters for Crypto and Forex Units Change: Rename crypto subpackages","title":"v1.0.1 - 17-04-2020"},{"location":"changelog/#v100-23-10-2019","text":"New: Support for Time Series Data New:Support for Forex Data New:Support for Crypto Currencies New:Support for Exchange Rates New:Tests for Time Series","title":"v1.0.0 - 23-10-2019"},{"location":"crypto/","text":"Digital Currencies \u00b6 Defaults \u00b6 dataType: DataType.JSON Daily \u00b6 Java Alphavantage . api () . crypto () . daily () . forSymbol ( \"BTC\" ) . market ( \"CNY\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch (); Weekly \u00b6 Java Alphavantage . api () . crypto () . weekly () . forSymbol ( \"BTC\" ) . market ( \"USD\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch (); Monthly \u00b6 Java Alphavantage . api () . crypto () . monthly () . forSymbol ( \"BTC\" ) . market ( \"USD\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch (); Response Type: CryptoResponse Response \u00b6 Java public void onData ( List < CryptoUnit > cryptoUnits ){ cryptoUnits . stream (). forEach ( u -> { System . out . println ( u . getHigh ()); System . out . println ( u . getLow ()); System . out . println ( u . getOpen ()); System . out . println ( u . getClose ()); System . out . println ( u . getHighUSD ()); System . out . println ( u . getLowUSD ()); System . out . println ( u . getOpenUSD ()); System . out . println ( u . getCloseUSD ()); System . out . println ( u . getVolume ()); System . out . println ( u . getMarketCap ()); System . out . println ( u . getDate ()); }) } Health Index \u00b6 Java Alphavantage . api () . crypto () . rating () . forSymbol ( \"BTC\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: RatingResponse Response \u00b6 Java public void onData ( RatingResponse response ){ System . out . println ( response . getSymbol ()); System . out . println ( response . getName ()); System . out . println ( response . getFcasRating ()); System . out . println ( response . getFcasScore ()); System . out . println ( response . getDeveloperScore ()); System . out . println ( response . getMarketMaturityScore ()); System . out . println ( response . getUtilityScore ()); System . out . println ( response . getLastRefreshed ()); System . out . println ( response . getTimeZone ()); }","title":"CryptoCurrencies"},{"location":"crypto/#digital-currencies","text":"","title":"Digital Currencies"},{"location":"crypto/#defaults","text":"dataType: DataType.JSON","title":"Defaults"},{"location":"crypto/#daily","text":"Java Alphavantage . api () . crypto () . daily () . forSymbol ( \"BTC\" ) . market ( \"CNY\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch ();","title":"Daily"},{"location":"crypto/#weekly","text":"Java Alphavantage . api () . crypto () . weekly () . forSymbol ( \"BTC\" ) . market ( \"USD\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch ();","title":"Weekly"},{"location":"crypto/#monthly","text":"Java Alphavantage . api () . crypto () . monthly () . forSymbol ( \"BTC\" ) . market ( \"USD\" ) . onSuccess ( e -> onData ( e . getCryptoUnits ())) . fetch (); Response Type: CryptoResponse","title":"Monthly"},{"location":"crypto/#response","text":"Java public void onData ( List < CryptoUnit > cryptoUnits ){ cryptoUnits . stream (). forEach ( u -> { System . out . println ( u . getHigh ()); System . out . println ( u . getLow ()); System . out . println ( u . getOpen ()); System . out . println ( u . getClose ()); System . out . println ( u . getHighUSD ()); System . out . println ( u . getLowUSD ()); System . out . println ( u . getOpenUSD ()); System . out . println ( u . getCloseUSD ()); System . out . println ( u . getVolume ()); System . out . println ( u . getMarketCap ()); System . out . println ( u . getDate ()); }) }","title":"Response"},{"location":"crypto/#health-index","text":"Java Alphavantage . api () . crypto () . rating () . forSymbol ( \"BTC\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: RatingResponse","title":"Health Index"},{"location":"crypto/#response_1","text":"Java public void onData ( RatingResponse response ){ System . out . println ( response . getSymbol ()); System . out . println ( response . getName ()); System . out . println ( response . getFcasRating ()); System . out . println ( response . getFcasScore ()); System . out . println ( response . getDeveloperScore ()); System . out . println ( response . getMarketMaturityScore ()); System . out . println ( response . getUtilityScore ()); System . out . println ( response . getLastRefreshed ()); System . out . println ( response . getTimeZone ()); }","title":"Response"},{"location":"exchangerate/","text":"Request \u00b6 Java AlphaVantage . api () . exchangeRate () . fromCurrency ( \"USD\" ) . toCurrency ( \"GHS\" ) . onSuccess (( e ) -> onData ( e )) . fetch (); Response Type: ExchangeRateResponse Response \u00b6 Java public void onData ( ExchangeRateResponse response ){ System . out . println ( response . getExchangeRate ()); System . out . println ( response . getBidPrice ()); System . out . println ( response . getAskPrice ()); System . out . println ( response . getFromCurrencyCode ()); System . out . println ( response . getFromCurrencyName ()); System . out . println ( response . getToCurrencyCode ()); System . out . println ( response . getToCurrencyName ()); System . out . println ( response . getLastRefreshed ()); System . out . println ( response . getTimeZone ()); }","title":"Exchange Rates"},{"location":"exchangerate/#request","text":"Java AlphaVantage . api () . exchangeRate () . fromCurrency ( \"USD\" ) . toCurrency ( \"GHS\" ) . onSuccess (( e ) -> onData ( e )) . fetch (); Response Type: ExchangeRateResponse","title":"Request"},{"location":"exchangerate/#response","text":"Java public void onData ( ExchangeRateResponse response ){ System . out . println ( response . getExchangeRate ()); System . out . println ( response . getBidPrice ()); System . out . println ( response . getAskPrice ()); System . out . println ( response . getFromCurrencyCode ()); System . out . println ( response . getFromCurrencyName ()); System . out . println ( response . getToCurrencyCode ()); System . out . println ( response . getToCurrencyName ()); System . out . println ( response . getLastRefreshed ()); System . out . println ( response . getTimeZone ()); }","title":"Response"},{"location":"forex/","text":"Defaults \u00b6 interval: Interval.ONE_MIN ouputSize: OutputSize.COMPACT dataType: DataType.JSON Intraday \u00b6 Java Alphavantage . api () . forex () . intraday () . forSymbol ( \"AAPL\" ) . interval ( Interval . THIRTY_MIN ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch (); Daily \u00b6 Java Alphavantage . api () . forex () . daily () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch (); Weekly \u00b6 Java Alphavantage . api () . forex () . weekly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch (); Monthly \u00b6 Java Alphavantage . api () . forex () . monthly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch (); Response Type: ForexResponse Response \u00b6 Java public void onData ( List < ForexUnit > forexUnits ){ stockUnits . stream (). forEach ( u -> { System . out . println ( u . getHigh ()); System . out . println ( u . getLow ()); System . out . println ( u . getOpen ()); System . out . println ( u . getClose ()); System . out . println ( u . getDate ()); }) }","title":"Forex (FX)"},{"location":"forex/#defaults","text":"interval: Interval.ONE_MIN ouputSize: OutputSize.COMPACT dataType: DataType.JSON","title":"Defaults"},{"location":"forex/#intraday","text":"Java Alphavantage . api () . forex () . intraday () . forSymbol ( \"AAPL\" ) . interval ( Interval . THIRTY_MIN ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch ();","title":"Intraday"},{"location":"forex/#daily","text":"Java Alphavantage . api () . forex () . daily () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch ();","title":"Daily"},{"location":"forex/#weekly","text":"Java Alphavantage . api () . forex () . weekly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch ();","title":"Weekly"},{"location":"forex/#monthly","text":"Java Alphavantage . api () . forex () . monthly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getForexUnits ())) . fetch (); Response Type: ForexResponse","title":"Monthly"},{"location":"forex/#response","text":"Java public void onData ( List < ForexUnit > forexUnits ){ stockUnits . stream (). forEach ( u -> { System . out . println ( u . getHigh ()); System . out . println ( u . getLow ()); System . out . println ( u . getOpen ()); System . out . println ( u . getClose ()); System . out . println ( u . getDate ()); }) }","title":"Response"},{"location":"fundamentaldata/","text":"Fundamental Data \u00b6 Cash Flow \u00b6 Java AlphaVantage . api () . fundamentalData () . cashFlow () . forSymbol ( \"IBM\" ) . onSuccess (( CashFlowResponse e ) -> process ( e )) . fetch (); Response Type: CashFlowResponse Income Statement \u00b6 Java AlphaVantage . api () . fundamentalData () . incomeStatement () . forSymbol ( \"IBM\" ) . onSuccess (( IncomeStatementResponse e ) -> process ( e )) . fetch (); Response Type: IncomeStatementResponse Balance Sheet \u00b6 Java AlphaVantage . api () . fundamentalData () . balanceSheet () . forSymbol ( \"IBM\" ) . onSuccess (( BalanceSheetResponse e ) -> process ( e )) . fetch (); Response Type: BalanceSheetResponse Earnings \u00b6 Java AlphaVantage . api () . fundamentalData () . earnings () . forSymbol ( \"IBM\" ) . onSuccess (( EarningsResponse e ) -> process ( e )) . fetch (); Response Type: EarningsResponse Company Overview \u00b6 Java AlphaVantage . api () . fundamentalData () . companyOverview () . forSymbol ( \"IBM\" ) . onSuccess (( CompanyOverviewResponse e ) -> process ( e )) . fetch (); Response Type: CompanyOverviewResponse","title":"Fundamental Data"},{"location":"fundamentaldata/#fundamental-data","text":"","title":"Fundamental Data"},{"location":"fundamentaldata/#cash-flow","text":"Java AlphaVantage . api () . fundamentalData () . cashFlow () . forSymbol ( \"IBM\" ) . onSuccess (( CashFlowResponse e ) -> process ( e )) . fetch (); Response Type: CashFlowResponse","title":"Cash Flow"},{"location":"fundamentaldata/#income-statement","text":"Java AlphaVantage . api () . fundamentalData () . incomeStatement () . forSymbol ( \"IBM\" ) . onSuccess (( IncomeStatementResponse e ) -> process ( e )) . fetch (); Response Type: IncomeStatementResponse","title":"Income Statement"},{"location":"fundamentaldata/#balance-sheet","text":"Java AlphaVantage . api () . fundamentalData () . balanceSheet () . forSymbol ( \"IBM\" ) . onSuccess (( BalanceSheetResponse e ) -> process ( e )) . fetch (); Response Type: BalanceSheetResponse","title":"Balance Sheet"},{"location":"fundamentaldata/#earnings","text":"Java AlphaVantage . api () . fundamentalData () . earnings () . forSymbol ( \"IBM\" ) . onSuccess (( EarningsResponse e ) -> process ( e )) . fetch (); Response Type: EarningsResponse","title":"Earnings"},{"location":"fundamentaldata/#company-overview","text":"Java AlphaVantage . api () . fundamentalData () . companyOverview () . forSymbol ( \"IBM\" ) . onSuccess (( CompanyOverviewResponse e ) -> process ( e )) . fetch (); Response Type: CompanyOverviewResponse","title":"Company Overview"},{"location":"indicators/","text":"Note All Indicator Response provide a getIndicatorUnits() method to acess technical indicator data and getMetaData() to access metadata information SMA \u00b6 Java AlphaVantage . api () . indicator () . sma () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse EMA \u00b6 Java AlphaVantage . api () . indicator () . ema () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse WMA \u00b6 Java AlphaVantage . api () . indicator () . wma () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse DEMA \u00b6 Java AlphaVantage . api () . indicator () . dema () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse TEMA \u00b6 Java AlphaVantage . api () . indicator () . tema () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse TRIMA \u00b6 Java AlphaVantage . api () . indicator () . trima () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse KAMA \u00b6 Java AlphaVantage . api () . indicator () . kama () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse MAMA \u00b6 Java AlphaVantage . api () . indicator () . mama () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . fastLimit ( 0.1 ) . slowLimit ( 0.5 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MAMAResponse VWAP \u00b6 Java AlphaVantage . api () . indicator () . vwap () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse T3 \u00b6 Java AlphaVantage . api () . indicator () . t3 () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse MACD \u00b6 Java AlphaVantage . api () . indicator () . macd () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . fastPeriod ( 12 ) . slowPeriod ( 26 ) . signalPeriod ( 9 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MACDResponse MACDEXT \u00b6 Java AlphaVantage . api () . indicator () . macdext () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . fastPeriod ( 12 ) . slowPeriod ( 26 ) . signalPeriod ( 9 ) . slowMaType ( MAType . SMA ) . fastMaType ( MAType . MAMA ) . signalMaType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MACDEXTResponse STOCH \u00b6 Java AlphaVantage . api () . indicator () . stoch () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . slowKPeriod ( 3 ) . slowDPeriod ( 3 ) . slowKMaType ( MAType . SMA ) . slowDMaType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHResponse STOCHF \u00b6 Java AlphaVantage . api () . indicator () . stochf () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . fastDPeriod ( 3 ) . fastDMaType ( MAType . MAMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHFResponse RSI \u00b6 Java AlphaVantage . api () . indicator () . rsi () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse STOCHRSI \u00b6 Java AlphaVantage . api () . indicator () . stochrsi () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . fastDPeriod ( 3 ) . fastDMaType ( MAType . MAMA ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHRSIResponse WILLR \u00b6 Java AlphaVantage . api () . indicator () . willr () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse ADX \u00b6 Java AlphaVantage . api () . indicator () . adx () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse ADXR \u00b6 Java AlphaVantage . api () . indicator () . adxr () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse PPO \u00b6 Java AlphaVantage . api () . indicator () . ppo () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . maType ( MAType . MAMA ) . fastPeriod ( 10 ) . slowPeriod ( 26 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PriceOscillatorResponse APO \u00b6 Java AlphaVantage . api () . indicator () . apo () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . maType ( MAType . MAMA ) . fastPeriod ( 10 ) . slowPeriod ( 26 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PriceOscillatorResponse MOM \u00b6 Java AlphaVantage . api () . indicator () . mom () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse BOP \u00b6 Java AlphaVantage . api () . indicator () . bop () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse CCI \u00b6 Java AlphaVantage . api () . indicator () . cci () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse CMO \u00b6 Java AlphaVantage . api () . indicator () . cmo () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse ROC \u00b6 Java AlphaVantage . api () . indicator () . roc () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse ROCR \u00b6 Java AlphaVantage . api () . indicator () . rocr () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse AROON \u00b6 Java AlphaVantage . api () . indicator () . aroon () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: AROONResponse AROONOSC \u00b6 Java AlphaVantage . api () . indicator () . aroonosc () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse MFI \u00b6 Java AlphaVantage . api () . indicator () . mfi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse TRIX \u00b6 Java AlphaVantage . api () . indicator () . trix () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse ULTOSC \u00b6 Java AlphaVantage . api () . indicator () . ultosc () . interval ( Interval . SIXTY_MIN ) . timePeriod1 ( 7 ) . timePeriod2 ( 14 ) . timePeriod3 ( 28 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: ULTOSCResponse DX \u00b6 Java AlphaVantage . api () . indicator () . dx () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse MINUS_DI \u00b6 Java AlphaVantage . api () . indicator () . minusdi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse PLUS_DI \u00b6 Java AlphaVantage . api () . indicator () . plusdi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse MINUS_DM \u00b6 Java AlphaVantage . api () . indicator () . minusdm () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse PLUS_DM \u00b6 Java AlphaVantage . api () . indicator () . plusdm () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse BBANDS \u00b6 Java AlphaVantage . api () . indicator () . bbands () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . seriesType ( SeriesType . OPEN ) . nbdevdn ( 4 ) . nbdevup ( 4 ) . maType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: BBANDSResponse MIDPOINT \u00b6 Java AlphaVantage . api () . indicator () . midpoint () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse MIDPRICE \u00b6 Java AlphaVantage . api () . indicator () . midprice () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse SAR \u00b6 Java AlphaVantage . api () . indicator () . sar () . interval ( Interval . DAILY ) . acceleration ( 0.02 ) . maximum ( 0.50 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SARResponse TRANGE \u00b6 Java AlphaVantage . api () . indicator () . trange () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse ATR \u00b6 Java AlphaVantage . api () . indicator () . atr () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse NATR \u00b6 Java AlphaVantage . api () . indicator () . natr () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse AD \u00b6 Java AlphaVantage . api () . indicator () . ad () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse ADOSC \u00b6 Java AlphaVantage . api () . indicator () . adosc () . interval ( Interval . WEEKLY ) . fastPeriod ( 3 ) . slowPeriod ( 10 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: ADOSCResponse OBV \u00b6 Java AlphaVantage . api () . indicator () . obv () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse HT_TRENDLINE \u00b6 Java AlphaVantage . api () . indicator () . httrendline () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse HT_SINE \u00b6 Java AlphaVantage . api () . indicator () . htsine () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: HTSINEResponse HT_TRENDMODE \u00b6 Java AlphaVantage . api () . indicator () . httrendmode () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse HT_DCPERIOD \u00b6 Java AlphaVantage . api () . indicator () . htdcperiod () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse HT_DCPHASE \u00b6 Java AlphaVantage . api () . indicator () . htdcphase () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse HT_PHASOR \u00b6 Java AlphaVantage . api () . indicator () . httrendmode () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: HTPHASORResponse","title":"Technical Indicators"},{"location":"indicators/#sma","text":"Java AlphaVantage . api () . indicator () . sma () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"SMA"},{"location":"indicators/#ema","text":"Java AlphaVantage . api () . indicator () . ema () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"EMA"},{"location":"indicators/#wma","text":"Java AlphaVantage . api () . indicator () . wma () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"WMA"},{"location":"indicators/#dema","text":"Java AlphaVantage . api () . indicator () . dema () . forSymbol ( \"AAPL\" ) . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"DEMA"},{"location":"indicators/#tema","text":"Java AlphaVantage . api () . indicator () . tema () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"TEMA"},{"location":"indicators/#trima","text":"Java AlphaVantage . api () . indicator () . trima () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"TRIMA"},{"location":"indicators/#kama","text":"Java AlphaVantage . api () . indicator () . kama () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"KAMA"},{"location":"indicators/#mama","text":"Java AlphaVantage . api () . indicator () . mama () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . fastLimit ( 0.1 ) . slowLimit ( 0.5 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MAMAResponse","title":"MAMA"},{"location":"indicators/#vwap","text":"Java AlphaVantage . api () . indicator () . vwap () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse","title":"VWAP"},{"location":"indicators/#t3","text":"Java AlphaVantage . api () . indicator () . t3 () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"T3"},{"location":"indicators/#macd","text":"Java AlphaVantage . api () . indicator () . macd () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . fastPeriod ( 12 ) . slowPeriod ( 26 ) . signalPeriod ( 9 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MACDResponse","title":"MACD"},{"location":"indicators/#macdext","text":"Java AlphaVantage . api () . indicator () . macdext () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . fastPeriod ( 12 ) . slowPeriod ( 26 ) . signalPeriod ( 9 ) . slowMaType ( MAType . SMA ) . fastMaType ( MAType . MAMA ) . signalMaType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: MACDEXTResponse","title":"MACDEXT"},{"location":"indicators/#stoch","text":"Java AlphaVantage . api () . indicator () . stoch () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . slowKPeriod ( 3 ) . slowDPeriod ( 3 ) . slowKMaType ( MAType . SMA ) . slowDMaType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHResponse","title":"STOCH"},{"location":"indicators/#stochf","text":"Java AlphaVantage . api () . indicator () . stochf () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . fastDPeriod ( 3 ) . fastDMaType ( MAType . MAMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHFResponse","title":"STOCHF"},{"location":"indicators/#rsi","text":"Java AlphaVantage . api () . indicator () . rsi () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"RSI"},{"location":"indicators/#stochrsi","text":"Java AlphaVantage . api () . indicator () . stochrsi () . interval ( Interval . SIXTY_MIN ) . fastKPeriod ( 5 ) . fastDPeriod ( 3 ) . fastDMaType ( MAType . MAMA ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: STOCHRSIResponse","title":"STOCHRSI"},{"location":"indicators/#willr","text":"Java AlphaVantage . api () . indicator () . willr () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"WILLR"},{"location":"indicators/#adx","text":"Java AlphaVantage . api () . indicator () . adx () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"ADX"},{"location":"indicators/#adxr","text":"Java AlphaVantage . api () . indicator () . adxr () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"ADXR"},{"location":"indicators/#ppo","text":"Java AlphaVantage . api () . indicator () . ppo () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . maType ( MAType . MAMA ) . fastPeriod ( 10 ) . slowPeriod ( 26 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PriceOscillatorResponse","title":"PPO"},{"location":"indicators/#apo","text":"Java AlphaVantage . api () . indicator () . apo () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . maType ( MAType . MAMA ) . fastPeriod ( 10 ) . slowPeriod ( 26 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PriceOscillatorResponse","title":"APO"},{"location":"indicators/#mom","text":"Java AlphaVantage . api () . indicator () . mom () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"MOM"},{"location":"indicators/#bop","text":"Java AlphaVantage . api () . indicator () . bop () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse","title":"BOP"},{"location":"indicators/#cci","text":"Java AlphaVantage . api () . indicator () . cci () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"CCI"},{"location":"indicators/#cmo","text":"Java AlphaVantage . api () . indicator () . cmo () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"CMO"},{"location":"indicators/#roc","text":"Java AlphaVantage . api () . indicator () . roc () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"ROC"},{"location":"indicators/#rocr","text":"Java AlphaVantage . api () . indicator () . rocr () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"ROCR"},{"location":"indicators/#aroon","text":"Java AlphaVantage . api () . indicator () . aroon () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: AROONResponse","title":"AROON"},{"location":"indicators/#aroonosc","text":"Java AlphaVantage . api () . indicator () . aroonosc () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"AROONOSC"},{"location":"indicators/#mfi","text":"Java AlphaVantage . api () . indicator () . mfi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"MFI"},{"location":"indicators/#trix","text":"Java AlphaVantage . api () . indicator () . trix () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"TRIX"},{"location":"indicators/#ultosc","text":"Java AlphaVantage . api () . indicator () . ultosc () . interval ( Interval . SIXTY_MIN ) . timePeriod1 ( 7 ) . timePeriod2 ( 14 ) . timePeriod3 ( 28 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: ULTOSCResponse","title":"ULTOSC"},{"location":"indicators/#dx","text":"Java AlphaVantage . api () . indicator () . dx () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"DX"},{"location":"indicators/#minus_di","text":"Java AlphaVantage . api () . indicator () . minusdi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"MINUS_DI"},{"location":"indicators/#plus_di","text":"Java AlphaVantage . api () . indicator () . plusdi () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"PLUS_DI"},{"location":"indicators/#minus_dm","text":"Java AlphaVantage . api () . indicator () . minusdm () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"MINUS_DM"},{"location":"indicators/#plus_dm","text":"Java AlphaVantage . api () . indicator () . plusdm () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"PLUS_DM"},{"location":"indicators/#bbands","text":"Java AlphaVantage . api () . indicator () . bbands () . interval ( Interval . DAILY ) . timePeriod ( 60 ) . seriesType ( SeriesType . OPEN ) . nbdevdn ( 4 ) . nbdevup ( 4 ) . maType ( MAType . SMA ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: BBANDSResponse","title":"BBANDS"},{"location":"indicators/#midpoint","text":"Java AlphaVantage . api () . indicator () . midpoint () . interval ( Interval . WEEKLY ) . seriesType ( SeriesType . OPEN ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicSeriesResponse","title":"MIDPOINT"},{"location":"indicators/#midprice","text":"Java AlphaVantage . api () . indicator () . midprice () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"MIDPRICE"},{"location":"indicators/#sar","text":"Java AlphaVantage . api () . indicator () . sar () . interval ( Interval . DAILY ) . acceleration ( 0.02 ) . maximum ( 0.50 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SARResponse","title":"SAR"},{"location":"indicators/#trange","text":"Java AlphaVantage . api () . indicator () . trange () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse","title":"TRANGE"},{"location":"indicators/#atr","text":"Java AlphaVantage . api () . indicator () . atr () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"ATR"},{"location":"indicators/#natr","text":"Java AlphaVantage . api () . indicator () . natr () . interval ( Interval . WEEKLY ) . timePeriod ( 60 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: PeriodicResponse","title":"NATR"},{"location":"indicators/#ad","text":"Java AlphaVantage . api () . indicator () . ad () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse","title":"AD"},{"location":"indicators/#adosc","text":"Java AlphaVantage . api () . indicator () . adosc () . interval ( Interval . WEEKLY ) . fastPeriod ( 3 ) . slowPeriod ( 10 ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: ADOSCResponse","title":"ADOSC"},{"location":"indicators/#obv","text":"Java AlphaVantage . api () . indicator () . obv () . interval ( Interval . WEEKLY ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SimpleIndicatorResponse","title":"OBV"},{"location":"indicators/#ht_trendline","text":"Java AlphaVantage . api () . indicator () . httrendline () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse","title":"HT_TRENDLINE"},{"location":"indicators/#ht_sine","text":"Java AlphaVantage . api () . indicator () . htsine () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: HTSINEResponse","title":"HT_SINE"},{"location":"indicators/#ht_trendmode","text":"Java AlphaVantage . api () . indicator () . httrendmode () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse","title":"HT_TRENDMODE"},{"location":"indicators/#ht_dcperiod","text":"Java AlphaVantage . api () . indicator () . htdcperiod () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse","title":"HT_DCPERIOD"},{"location":"indicators/#ht_dcphase","text":"Java AlphaVantage . api () . indicator () . htdcphase () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: SeriesResponse","title":"HT_DCPHASE"},{"location":"indicators/#ht_phasor","text":"Java AlphaVantage . api () . indicator () . httrendmode () . interval ( Interval . DAILY ) . seriesType ( SeriesType . OPEN ) . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: HTPHASORResponse","title":"HT_PHASOR"},{"location":"sector/","text":"Request \u00b6 Java AlphaVantage . api () . sector () . onSuccess (( e ) -> onData ( e )) . fetch (); Response Type: SectorResponse Response \u00b6 Java public void onData ( SectorResponse reponse ){ SectorUnit realtime = response . getRealTimePerformance (); String energy = realtime . getEnergy (); String financials = realtime . getFinancials (); String industrials = realtime . getIndustrials (); String realEstate = realtime . getRealEstate (); String informationTechnology = realtime . getInformationTechnology (); String materials = realtime . getMaterials (); String consumerDiscretionary = realtime . getConsumerDiscretionary (); String communicationServices = realtime . getCommunicationServices (); String healthCare = realtime . getHealthCare (); String consumerStaples = realtime . getConsumerStaples (); String utilities = realtime . getUtilities (); ... }","title":"Sector Performances"},{"location":"sector/#request","text":"Java AlphaVantage . api () . sector () . onSuccess (( e ) -> onData ( e )) . fetch (); Response Type: SectorResponse","title":"Request"},{"location":"sector/#response","text":"Java public void onData ( SectorResponse reponse ){ SectorUnit realtime = response . getRealTimePerformance (); String energy = realtime . getEnergy (); String financials = realtime . getFinancials (); String industrials = realtime . getIndustrials (); String realEstate = realtime . getRealEstate (); String informationTechnology = realtime . getInformationTechnology (); String materials = realtime . getMaterials (); String consumerDiscretionary = realtime . getConsumerDiscretionary (); String communicationServices = realtime . getCommunicationServices (); String healthCare = realtime . getHealthCare (); String consumerStaples = realtime . getConsumerStaples (); String utilities = realtime . getUtilities (); ... }","title":"Response"},{"location":"timeseries/","text":"Time Series \u00b6 Defaults \u00b6 interval: Interval.ONE_MIN ouputSize: OutputSize.COMPACT dataType: DataType.JSON Intraday \u00b6 Java Alphavantage . api () . timeSeries () . intraday () . forSymbol ( \"AAPL\" ) . interval ( Interval . THIRTY_MIN ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse Daily \u00b6 Java Alphavantage . api () . timeSeries () . daily () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse Daily Adjusted \u00b6 Java Alphavantage . api () . timeSeries () . daily () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse Weekly \u00b6 Java Alphavantage . api () . timeSeries () . weekly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse Weekly Adjusted \u00b6 Java Alphavantage . api () . timeSeries () . weekly () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse Monthly \u00b6 Java Alphavantage . api () . timeSeries () . monthly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse Monthly Adjusted \u00b6 Java Alphavantage . api () . timeSeries () . monthly () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse Response \u00b6 Java public void onData ( List < StockUnit > stockUnits ){ stockUnits . stream (). forEach ( u -> { System . out . println ( u . getHigh ()); System . out . println ( u . getLow ()); System . out . println ( u . getOpen ()); System . out . println ( u . getClose ()); System . out . println ( u . getVolume ()); System . out . println ( u . getAdjustedClose ()); System . out . println ( u . getDividendAmount ()); System . out . println ( u . getSplitCoefficient ()); System . out . println ( u . getDate ()); }) } Quote Endpoint \u00b6 Java Alphavantage . api () . timeSeries () . quote () . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: QuoteResponse Response \u00b6 Java public void onData ( QuoteResponse reponse ){ System . out . println ( response . getHigh ()); System . out . println ( response . getLow ()); System . out . println ( response . getOpen ()); System . out . println ( response . getClose ()); System . out . println ( response . getVolume ()); System . out . println ( response . getSymbol ()); System . out . println ( response . getLatestTradingDay ()); System . out . println ( response . getPreviousClose ()); System . out . println ( response . getChange ()); System . out . println ( response . getChangePercent ()); }","title":"Stock Time Series"},{"location":"timeseries/#time-series","text":"","title":"Time Series"},{"location":"timeseries/#defaults","text":"interval: Interval.ONE_MIN ouputSize: OutputSize.COMPACT dataType: DataType.JSON","title":"Defaults"},{"location":"timeseries/#intraday","text":"Java Alphavantage . api () . timeSeries () . intraday () . forSymbol ( \"AAPL\" ) . interval ( Interval . THIRTY_MIN ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse","title":"Intraday"},{"location":"timeseries/#daily","text":"Java Alphavantage . api () . timeSeries () . daily () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse","title":"Daily"},{"location":"timeseries/#daily-adjusted","text":"Java Alphavantage . api () . timeSeries () . daily () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse","title":"Daily Adjusted"},{"location":"timeseries/#weekly","text":"Java Alphavantage . api () . timeSeries () . weekly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse","title":"Weekly"},{"location":"timeseries/#weekly-adjusted","text":"Java Alphavantage . api () . timeSeries () . weekly () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse","title":"Weekly Adjusted"},{"location":"timeseries/#monthly","text":"Java Alphavantage . api () . timeSeries () . monthly () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse","title":"Monthly"},{"location":"timeseries/#monthly-adjusted","text":"Java Alphavantage . api () . timeSeries () . monthly () . adjusted () . forSymbol ( \"AAPL\" ) . outputSize ( OutputSize . FULL ) . dataType ( DataType . JSON ) . onSuccess ( e -> onData ( e . getStockUnits ())) . fetch (); Response Type: TimeSeriesResponse","title":"Monthly Adjusted"},{"location":"timeseries/#response","text":"Java public void onData ( List < StockUnit > stockUnits ){ stockUnits . stream (). forEach ( u -> { System . out . println ( u . getHigh ()); System . out . println ( u . getLow ()); System . out . println ( u . getOpen ()); System . out . println ( u . getClose ()); System . out . println ( u . getVolume ()); System . out . println ( u . getAdjustedClose ()); System . out . println ( u . getDividendAmount ()); System . out . println ( u . getSplitCoefficient ()); System . out . println ( u . getDate ()); }) }","title":"Response"},{"location":"timeseries/#quote-endpoint","text":"Java Alphavantage . api () . timeSeries () . quote () . forSymbol ( \"AAPL\" ) . onSuccess ( e -> onData ( e )) . fetch (); Response Type: QuoteResponse","title":"Quote Endpoint"},{"location":"timeseries/#response_1","text":"Java public void onData ( QuoteResponse reponse ){ System . out . println ( response . getHigh ()); System . out . println ( response . getLow ()); System . out . println ( response . getOpen ()); System . out . println ( response . getClose ()); System . out . println ( response . getVolume ()); System . out . println ( response . getSymbol ()); System . out . println ( response . getLatestTradingDay ()); System . out . println ( response . getPreviousClose ()); System . out . println ( response . getChange ()); System . out . println ( response . getChangePercent ()); }","title":"Response"},{"location":"api/alphavantage/","text":"alphavantage-java \u00b6 alphavantage Package alphavantage \u00b6 Types \u00b6 Name Summary Alphavantage Client interface of library. The API is accessed through this class. Exposes a singleton instance for interaction. class Alphavantage AlphavantageException Exception class for the library. class AlphavantageException Config Allows you to set the library configuration parameters. class AlphavantageException Fetcher Defines an interface for pulling data from the API source. A fetch operation can either fail or succeed. interface Fetcher UrlExtractor Extracts a valid url from a request object. The request object should contain valid api endpoint parameters. class UrlExtractor Packages \u00b6 Name Summary timeseries package alphavantage.timeseries crypto package alphavantage.crypto forex package alphavantage.forex indicator package alphavantage.indicator exchangerate package alphavantage.exchangerate sector package alphavantage.sector fundamentaldata package alphavantage.fundamentaldata","title":"alphavantage"},{"location":"api/alphavantage/#alphavantage-java","text":"alphavantage","title":"alphavantage-java"},{"location":"api/alphavantage/#package-alphavantage","text":"","title":"Package alphavantage"},{"location":"api/alphavantage/#types","text":"Name Summary Alphavantage Client interface of library. The API is accessed through this class. Exposes a singleton instance for interaction. class Alphavantage AlphavantageException Exception class for the library. class AlphavantageException Config Allows you to set the library configuration parameters. class AlphavantageException Fetcher Defines an interface for pulling data from the API source. A fetch operation can either fail or succeed. interface Fetcher UrlExtractor Extracts a valid url from a request object. The request object should contain valid api endpoint parameters. class UrlExtractor","title":"Types"},{"location":"api/alphavantage/#packages","text":"Name Summary timeseries package alphavantage.timeseries crypto package alphavantage.crypto forex package alphavantage.forex indicator package alphavantage.indicator exchangerate package alphavantage.exchangerate sector package alphavantage.sector fundamentaldata package alphavantage.fundamentaldata","title":"Packages"},{"location":"api/alphavantage/alphavantage/","text":"alphavantage / Alphavantage Alphavantage \u00b6 public class Alphavantage extends Object Client interface of library. The API is accessed through this class. Exposes a singleton instance for interaction. Initialization \u00b6 This class should only be initialized once by calling init .You will typically call this in your main application class. You cannot create an instance using new . Alphavantage . api (). init ( config ) Constructors \u00b6 Name Summary Alphavantage private default constructor private Alphavantage() Properties \u00b6 Name Summary INSTANCE private static Alphavantage INSTANCE config private Config config Methods \u00b6 Name Summary api Get a reference to the api. public static Alphavantage api() init Initialize the library with your configuration. public void init(Config config) crypto Access to Digital Currencies. Returns a Crypto Instace for acces to Digital Currency data. public Crypto crypto() exchangeRate Access to Exchnage Rates Data. public ExchangeRate exhcangeRate() forex Access to Foreign Exchange Data. public Forex forex() indicator Access to Technical Indicators. Returns an Indicator instance for access to Technical Indicator Data public Indicator indicator() timeSeries Access to Stock Time Series Data. public TimeSeries timeSeries() sector Access to Sector Performance Data. public Sector sector() fundamentaldata Access to Fundamental Data. public FundamentalData fundamentalData()","title":"Alphavantage"},{"location":"api/alphavantage/alphavantage/#alphavantage","text":"public class Alphavantage extends Object Client interface of library. The API is accessed through this class. Exposes a singleton instance for interaction.","title":"Alphavantage"},{"location":"api/alphavantage/alphavantage/#initialization","text":"This class should only be initialized once by calling init .You will typically call this in your main application class. You cannot create an instance using new . Alphavantage . api (). init ( config )","title":"Initialization"},{"location":"api/alphavantage/alphavantage/#constructors","text":"Name Summary Alphavantage private default constructor private Alphavantage()","title":"Constructors"},{"location":"api/alphavantage/alphavantage/#properties","text":"Name Summary INSTANCE private static Alphavantage INSTANCE config private Config config","title":"Properties"},{"location":"api/alphavantage/alphavantage/#methods","text":"Name Summary api Get a reference to the api. public static Alphavantage api() init Initialize the library with your configuration. public void init(Config config) crypto Access to Digital Currencies. Returns a Crypto Instace for acces to Digital Currency data. public Crypto crypto() exchangeRate Access to Exchnage Rates Data. public ExchangeRate exhcangeRate() forex Access to Foreign Exchange Data. public Forex forex() indicator Access to Technical Indicators. Returns an Indicator instance for access to Technical Indicator Data public Indicator indicator() timeSeries Access to Stock Time Series Data. public TimeSeries timeSeries() sector Access to Sector Performance Data. public Sector sector() fundamentaldata Access to Fundamental Data. public FundamentalData fundamentalData()","title":"Methods"},{"location":"api/alphavantage/config/","text":"alphavantage / Config Config \u00b6 public class Config extends Object Defines configuration parameters you can set for the library to use. You can set the httpClient for the library or use the default httpClient . HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor (); loggingInterceptor . level ( Level . BASIC ); OkHttpClient client = new OkHttpClient . Builder () . connectTimeout ( 4 , TimeUnit . SECONDS ) . callTimeout ( 4 , TimeUnit . SECONDS ) . addInterceptor ( loggingInterceptor ) . addInterceptor ( mockInterceptor ) . build (); Config config = Config . builder () . key ( \"demo\" ) . httpClient ( client ) . build (); //OR: use default http client Config config = Config . builder () . key ( \"demo\" ) . build () Types \u00b6 Name Summary Builder public static class Builder Constructors \u00b6 Name Summary Config private default constructor private Config() Properties \u00b6 Name Summary key private String key timeOut private int timeOut httpClient private OkHttpClient httpClient BASE_URL public static String BASE_URL Methods \u00b6 Name Summary builder public static Builder builder() defaultClient private OkHttpClient defaultClient(int timeOut) getTimeOut public int getTimeOut() getOkHttpClient public OkHttpClient getOkHttpClient() getKey public String getKey()","title":"Config"},{"location":"api/alphavantage/config/#config","text":"public class Config extends Object Defines configuration parameters you can set for the library to use. You can set the httpClient for the library or use the default httpClient . HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor (); loggingInterceptor . level ( Level . BASIC ); OkHttpClient client = new OkHttpClient . Builder () . connectTimeout ( 4 , TimeUnit . SECONDS ) . callTimeout ( 4 , TimeUnit . SECONDS ) . addInterceptor ( loggingInterceptor ) . addInterceptor ( mockInterceptor ) . build (); Config config = Config . builder () . key ( \"demo\" ) . httpClient ( client ) . build (); //OR: use default http client Config config = Config . builder () . key ( \"demo\" ) . build ()","title":"Config"},{"location":"api/alphavantage/config/#types","text":"Name Summary Builder public static class Builder","title":"Types"},{"location":"api/alphavantage/config/#constructors","text":"Name Summary Config private default constructor private Config()","title":"Constructors"},{"location":"api/alphavantage/config/#properties","text":"Name Summary key private String key timeOut private int timeOut httpClient private OkHttpClient httpClient BASE_URL public static String BASE_URL","title":"Properties"},{"location":"api/alphavantage/config/#methods","text":"Name Summary builder public static Builder builder() defaultClient private OkHttpClient defaultClient(int timeOut) getTimeOut public int getTimeOut() getOkHttpClient public OkHttpClient getOkHttpClient() getKey public String getKey()","title":"Methods"},{"location":"api/alphavantage/exception/","text":"alphavantage / AlphavantageException AlphavantageException \u00b6 public class AlphavantageException extends Object, RuntimeException Exception class for the library. Constructors \u00b6 Name Summary AlphavantageException public AlphavantageException() AlphavantageException public AlphavantageException(String message)","title":"Exception"},{"location":"api/alphavantage/exception/#alphavantageexception","text":"public class AlphavantageException extends Object, RuntimeException Exception class for the library.","title":"AlphavantageException"},{"location":"api/alphavantage/exception/#constructors","text":"Name Summary AlphavantageException public AlphavantageException() AlphavantageException public AlphavantageException(String message)","title":"Constructors"},{"location":"api/alphavantage/extractor/","text":"alphavantage / UrlExtractor UrlExtractor \u00b6 public class UrlExtractor extends Object Extracts a valid url from a request object. The request object should contain valid api endpoint parameters Constructors \u00b6 Name Summary UrlExtractor private default constructor private UrlExtractor() Methods \u00b6 Name Summary extract Get an API url from a request object. public static String extract(Object o)","title":"Extractor"},{"location":"api/alphavantage/extractor/#urlextractor","text":"public class UrlExtractor extends Object Extracts a valid url from a request object. The request object should contain valid api endpoint parameters","title":"UrlExtractor"},{"location":"api/alphavantage/extractor/#constructors","text":"Name Summary UrlExtractor private default constructor private UrlExtractor()","title":"Constructors"},{"location":"api/alphavantage/extractor/#methods","text":"Name Summary extract Get an API url from a request object. public static String extract(Object o)","title":"Methods"},{"location":"api/alphavantage/fetcher/","text":"alphavantage / Fetcher Fetcher \u00b6 public interface Fetcher Defines an interface for pulling data from the API source. A fetch operation can either fail or succeed. Types \u00b6 Name Summary SuccessCallback Callback when the fetch operation succeeds. <V> the type of the reponse of the fetch operation. interface SuccessCallback<V> FailureCallback Callback when the fetch operation fails. interface FailureCallback Methods \u00b6 Name Summary fetch Perform a fetch operation. void fetch()","title":"Fetcher"},{"location":"api/alphavantage/fetcher/#fetcher","text":"public interface Fetcher Defines an interface for pulling data from the API source. A fetch operation can either fail or succeed.","title":"Fetcher"},{"location":"api/alphavantage/fetcher/#types","text":"Name Summary SuccessCallback Callback when the fetch operation succeeds. <V> the type of the reponse of the fetch operation. interface SuccessCallback<V> FailureCallback Callback when the fetch operation fails. interface FailureCallback","title":"Types"},{"location":"api/alphavantage/fetcher/#methods","text":"Name Summary fetch Perform a fetch operation. void fetch()","title":"Methods"},{"location":"api/crypto/","text":"alphavantage-java \u00b6 alphavantage / crypto Package alphavantage.crypto \u00b6 Types \u00b6 Name Summary Crypto Access to Crypto Currency Data. class Crypto Packages \u00b6 Name Summary request package alphavantage.crypto.request response package alphavantage.crypto.response","title":"crypto"},{"location":"api/crypto/#alphavantage-java","text":"alphavantage / crypto","title":"alphavantage-java"},{"location":"api/crypto/#package-alphavantagecrypto","text":"","title":"Package alphavantage.crypto"},{"location":"api/crypto/#types","text":"Name Summary Crypto Access to Crypto Currency Data. class Crypto","title":"Types"},{"location":"api/crypto/#packages","text":"Name Summary request package alphavantage.crypto.request response package alphavantage.crypto.response","title":"Packages"},{"location":"api/exchangerate/","text":"alphavantage-java \u00b6 alphavantage / exchangerate Package alphavantage.exchangerate \u00b6 Types \u00b6 Name Summary ExchangeRate Access to Exchange Rate Data. class ExchangeRate Packages \u00b6 Name Summary request package alphavantage.exchangerate.request response package alphavantage.exchangerate.response","title":"exchangerate"},{"location":"api/exchangerate/#alphavantage-java","text":"alphavantage / exchangerate","title":"alphavantage-java"},{"location":"api/exchangerate/#package-alphavantageexchangerate","text":"","title":"Package alphavantage.exchangerate"},{"location":"api/exchangerate/#types","text":"Name Summary ExchangeRate Access to Exchange Rate Data. class ExchangeRate","title":"Types"},{"location":"api/exchangerate/#packages","text":"Name Summary request package alphavantage.exchangerate.request response package alphavantage.exchangerate.response","title":"Packages"},{"location":"api/forex/","text":"alphavantage-java \u00b6 alphavantage / forex Package alphavantage.forex \u00b6 Types \u00b6 Name Summary Forex Access to Foreign Exchange Data. class Forex Packages \u00b6 Name Summary request package alphavantage.forex.request response package alphavantage.forex.response","title":"forex"},{"location":"api/forex/#alphavantage-java","text":"alphavantage / forex","title":"alphavantage-java"},{"location":"api/forex/#package-alphavantageforex","text":"","title":"Package alphavantage.forex"},{"location":"api/forex/#types","text":"Name Summary Forex Access to Foreign Exchange Data. class Forex","title":"Types"},{"location":"api/forex/#packages","text":"Name Summary request package alphavantage.forex.request response package alphavantage.forex.response","title":"Packages"},{"location":"api/fundamentaldata/","text":"alphavantage-java \u00b6 alphavantage / fundamentaldata Package alphavantage.fundamentaldata \u00b6 Types \u00b6 Name Summary FundamentalData Access to Fundamental Data. class FundamentalData Packages \u00b6 Name Summary request package alphavantage.fundamentaldata.request response package alphavantage.fundamentaldata.response","title":"fundamentaldata"},{"location":"api/fundamentaldata/#alphavantage-java","text":"alphavantage / fundamentaldata","title":"alphavantage-java"},{"location":"api/fundamentaldata/#package-alphavantagefundamentaldata","text":"","title":"Package alphavantage.fundamentaldata"},{"location":"api/fundamentaldata/#types","text":"Name Summary FundamentalData Access to Fundamental Data. class FundamentalData","title":"Types"},{"location":"api/fundamentaldata/#packages","text":"Name Summary request package alphavantage.fundamentaldata.request response package alphavantage.fundamentaldata.response","title":"Packages"},{"location":"api/fundamentaldata/fundamentaldata/","text":"alphavantage / fundamentaldata / FundamentalData Sector \u00b6 public final class FundamentalData extends Object implements Fetcher Access to Fundamental Data Constructors \u00b6 Name Summary FundamentalData public FundamentalData(Config config) Properties \u00b6 Name Summary config private Config config builder private FundamentaDataRequest.Builder builder successCallback private Fetcher.SuccessCallback<?> successCallback failureCallback private Fetcher.FailureCallback failureCallback Methods \u00b6 Name Summary onSuccess public FundamentalData onSuccess(Fetcher.SuccessCallback<?> callback) onFailure public FundamentalData onFailure(Fetcher.FailureCallback callback) fetch public void fetch() fetchSync public void fetchSync()","title":"Fundamentaldata"},{"location":"api/fundamentaldata/fundamentaldata/#sector","text":"public final class FundamentalData extends Object implements Fetcher Access to Fundamental Data","title":"Sector"},{"location":"api/fundamentaldata/fundamentaldata/#constructors","text":"Name Summary FundamentalData public FundamentalData(Config config)","title":"Constructors"},{"location":"api/fundamentaldata/fundamentaldata/#properties","text":"Name Summary config private Config config builder private FundamentaDataRequest.Builder builder successCallback private Fetcher.SuccessCallback<?> successCallback failureCallback private Fetcher.FailureCallback failureCallback","title":"Properties"},{"location":"api/fundamentaldata/fundamentaldata/#methods","text":"Name Summary onSuccess public FundamentalData onSuccess(Fetcher.SuccessCallback<?> callback) onFailure public FundamentalData onFailure(Fetcher.FailureCallback callback) fetch public void fetch() fetchSync public void fetchSync()","title":"Methods"},{"location":"api/fundamentaldata/request/","text":"alphavantage-java \u00b6 alphavantage / fundamentaldata / request Package alphavantage.fundamentaldata.request \u00b6 Types \u00b6 Name Summary BalanceSheetRequest public class BalanceSheetRequest CashFlowRequest public class CashFlowRequest CompanyOverviewRequest public class CompanyOverviewRequest EarningsRequest public class EarningsResponseRequest FundamentalDataRequest public abstract class FundamentalDataRequest IncomeStatementRequest public class IncomeStatementRequest","title":"alphavantage-java"},{"location":"api/fundamentaldata/request/#alphavantage-java","text":"alphavantage / fundamentaldata / request","title":"alphavantage-java"},{"location":"api/fundamentaldata/request/#package-alphavantagefundamentaldatarequest","text":"","title":"Package alphavantage.fundamentaldata.request"},{"location":"api/fundamentaldata/request/#types","text":"Name Summary BalanceSheetRequest public class BalanceSheetRequest CashFlowRequest public class CashFlowRequest CompanyOverviewRequest public class CompanyOverviewRequest EarningsRequest public class EarningsResponseRequest FundamentalDataRequest public abstract class FundamentalDataRequest IncomeStatementRequest public class IncomeStatementRequest","title":"Types"},{"location":"api/fundamentaldata/response/","text":"alphavantage-java \u00b6 alphavantage / fundamentaldata / response Package alphavantage.fundamentaldata.response \u00b6 Types \u00b6 Name Summary AnnualEarning class AnnualEarning BalanceSheet class BalanceSheet BalanceSheetResponse class BalanceSheetResponse CashFlow class CashFlow CashFlowResponse class CashFlowResponse CompanyOverview class CompanyOverview CompanyOverviewResponse class CompanyOverviewResponse EarningsResponse class EarningsResponse IncomeStatement class IncomeStatement IncomeStatementResponse class IncomeStatementResponse QuarterlyEarning class QuarterlyEarning","title":"alphavantage-java"},{"location":"api/fundamentaldata/response/#alphavantage-java","text":"alphavantage / fundamentaldata / response","title":"alphavantage-java"},{"location":"api/fundamentaldata/response/#package-alphavantagefundamentaldataresponse","text":"","title":"Package alphavantage.fundamentaldata.response"},{"location":"api/fundamentaldata/response/#types","text":"Name Summary AnnualEarning class AnnualEarning BalanceSheet class BalanceSheet BalanceSheetResponse class BalanceSheetResponse CashFlow class CashFlow CashFlowResponse class CashFlowResponse CompanyOverview class CompanyOverview CompanyOverviewResponse class CompanyOverviewResponse EarningsResponse class EarningsResponse IncomeStatement class IncomeStatement IncomeStatementResponse class IncomeStatementResponse QuarterlyEarning class QuarterlyEarning","title":"Types"},{"location":"api/indicator/","text":"alphavantage-java \u00b6 alphavantage / indicator Package alphavantage.indicator \u00b6 Types \u00b6 Name Summary Indicator Access to Technical Indicator Data. class Indicator Packages \u00b6 Name Summary request package alphavantage.indicator.request response package alphavantage.indicator.response","title":"indicator"},{"location":"api/indicator/#alphavantage-java","text":"alphavantage / indicator","title":"alphavantage-java"},{"location":"api/indicator/#package-alphavantageindicator","text":"","title":"Package alphavantage.indicator"},{"location":"api/indicator/#types","text":"Name Summary Indicator Access to Technical Indicator Data. class Indicator","title":"Types"},{"location":"api/indicator/#packages","text":"Name Summary request package alphavantage.indicator.request response package alphavantage.indicator.response","title":"Packages"},{"location":"api/sector/","text":"alphavantage-java \u00b6 alphavantage / sector Package alphavantage.sector \u00b6 Types \u00b6 Name Summary Sector Access to Sector Performance Data. class Sector Packages \u00b6 Name Summary request package alphavantage.sector.request response package alphavantage.sector.response","title":"sector"},{"location":"api/sector/#alphavantage-java","text":"alphavantage / sector","title":"alphavantage-java"},{"location":"api/sector/#package-alphavantagesector","text":"","title":"Package alphavantage.sector"},{"location":"api/sector/#types","text":"Name Summary Sector Access to Sector Performance Data. class Sector","title":"Types"},{"location":"api/sector/#packages","text":"Name Summary request package alphavantage.sector.request response package alphavantage.sector.response","title":"Packages"},{"location":"api/sector/request/","text":"alphavantage-java \u00b6 alphavantage / sector / request Package alphavantage.sector.request \u00b6 Types \u00b6 Name Summary SectorRequest A sector performance request. class SectorRequest","title":"alphavantage-java"},{"location":"api/sector/request/#alphavantage-java","text":"alphavantage / sector / request","title":"alphavantage-java"},{"location":"api/sector/request/#package-alphavantagesectorrequest","text":"","title":"Package alphavantage.sector.request"},{"location":"api/sector/request/#types","text":"Name Summary SectorRequest A sector performance request. class SectorRequest","title":"Types"},{"location":"api/sector/response/","text":"alphavantage-java \u00b6 alphavantage / sector / response Package alphavantage.sector.response \u00b6 Types \u00b6 Name Summary SectorResponse A Sector performance response. class SectorResponse SectorUnit A sector performance data structure. class SectorUnit","title":"alphavantage-java"},{"location":"api/sector/response/#alphavantage-java","text":"alphavantage / sector / response","title":"alphavantage-java"},{"location":"api/sector/response/#package-alphavantagesectorresponse","text":"","title":"Package alphavantage.sector.response"},{"location":"api/sector/response/#types","text":"Name Summary SectorResponse A Sector performance response. class SectorResponse SectorUnit A sector performance data structure. class SectorUnit","title":"Types"},{"location":"api/sector/sector-request/","text":"alphavantage / sector / request / SectorRequest SectorRequest \u00b6 public final class SectorRequest extends Object A Sector request Types \u00b6 Name Summary Builder public static class Builder Constructors \u00b6 Name Summary SectorRequest private SectorRequest(SectorRequest.Builder builder) Properties \u00b6 Name Summary function private Function function","title":"Sector request"},{"location":"api/sector/sector-request/#sectorrequest","text":"public final class SectorRequest extends Object A Sector request","title":"SectorRequest"},{"location":"api/sector/sector-request/#types","text":"Name Summary Builder public static class Builder","title":"Types"},{"location":"api/sector/sector-request/#constructors","text":"Name Summary SectorRequest private SectorRequest(SectorRequest.Builder builder)","title":"Constructors"},{"location":"api/sector/sector-request/#properties","text":"Name Summary function private Function function","title":"Properties"},{"location":"api/sector/sector-response/","text":"alphavantage / sector / response / SectorResponse SectorResponse \u00b6 public final class SectorResponse extends Object A Sector response Types \u00b6 Name Summary MetaData public static class MetaData SectorParser public static class SectorParser Constructors \u00b6 Name Summary SectorResponse private SectorResponse(String errorMessage) SectorResponse private SectorResponse(MetaData metaData, Map<String, SectorUnit> sectorUnits) Properties \u00b6 Name Summary metaData private MetaData metaData sectorUnits private Map<String, SectorUnits> sectorUnits errorMessage private String errorMessage Methods \u00b6 Name Summary getMetaData public MetaData getMetaData() getErrorMessage public String getErrorMessage() getRealTimePerformance public SectorUnit getRealTimePerformance() getOneDayPerformance public SectorUnit getOneDayPerformance() getFiveDayPerformance public SectorUnit getFiveDayPerformance() getOneMonthPerformance public SectorUnit getOneMonthPerformance() getThreeMonthPerformance public SectorUnit getThreeMonthPerformance() getYearToDatePerformance public SectorUnit getYearToDatePerformance() getOneYearPerformance public SectorUnit getOneYearPerformance() getThreeYearPerformance public SectorUnit getThreeYearPerformance() getFiveYearPerformance public SectorUnit getFiveYearPerformance() getTenYearPerformance public SectorUnit getTenYearPerformance() toString public String toString()","title":"Sector response"},{"location":"api/sector/sector-response/#sectorresponse","text":"public final class SectorResponse extends Object A Sector response","title":"SectorResponse"},{"location":"api/sector/sector-response/#types","text":"Name Summary MetaData public static class MetaData SectorParser public static class SectorParser","title":"Types"},{"location":"api/sector/sector-response/#constructors","text":"Name Summary SectorResponse private SectorResponse(String errorMessage) SectorResponse private SectorResponse(MetaData metaData, Map<String, SectorUnit> sectorUnits)","title":"Constructors"},{"location":"api/sector/sector-response/#properties","text":"Name Summary metaData private MetaData metaData sectorUnits private Map<String, SectorUnits> sectorUnits errorMessage private String errorMessage","title":"Properties"},{"location":"api/sector/sector-response/#methods","text":"Name Summary getMetaData public MetaData getMetaData() getErrorMessage public String getErrorMessage() getRealTimePerformance public SectorUnit getRealTimePerformance() getOneDayPerformance public SectorUnit getOneDayPerformance() getFiveDayPerformance public SectorUnit getFiveDayPerformance() getOneMonthPerformance public SectorUnit getOneMonthPerformance() getThreeMonthPerformance public SectorUnit getThreeMonthPerformance() getYearToDatePerformance public SectorUnit getYearToDatePerformance() getOneYearPerformance public SectorUnit getOneYearPerformance() getThreeYearPerformance public SectorUnit getThreeYearPerformance() getFiveYearPerformance public SectorUnit getFiveYearPerformance() getTenYearPerformance public SectorUnit getTenYearPerformance() toString public String toString()","title":"Methods"},{"location":"api/sector/sector-unit/","text":"alphavantage / sector / response / SectorUnit SectorUnit \u00b6 public final class SectorUnit extends Object A sector performance data structure Constructors \u00b6 Name Summary SectorUnit public SectorUnit(String informationTechnology ,String consumerDiscretionary, String healthCare, String communicationServices,String realEstate,String utilities,String financials,String materials,String industrials,String consumerStaples,String energy) Properties \u00b6 Name Summary informationTechnology private String informationTechnology consumerDiscretionary private String consumerDiscretionary healthCare private String healthCare communicationServices private String communicationServices realEstate private String realEstate utilities private String utilities financials private String financials materials private String materials industrials private String industrials consumerStaples private String consumerStaples energy private String energy Methods \u00b6 Name Summary getInformationTechnology private String getInformationTechnology() getConsumerDiscretionary private String getConsumerDiscretionary() getHealthCare private String getHealthCare() getCommunicationServices private String getCommunicationServices() getRealEstate private String getRealEstate() getUtilities private String getUtilities() getFinancials private String getFinancials() getMaterials private String getMaterials() getIndustrials private String getIndustrials() getConsumerStaples private String getConsumerStaples() getEnergy private String getEnergy()","title":"Sector unit"},{"location":"api/sector/sector-unit/#sectorunit","text":"public final class SectorUnit extends Object A sector performance data structure","title":"SectorUnit"},{"location":"api/sector/sector-unit/#constructors","text":"Name Summary SectorUnit public SectorUnit(String informationTechnology ,String consumerDiscretionary, String healthCare, String communicationServices,String realEstate,String utilities,String financials,String materials,String industrials,String consumerStaples,String energy)","title":"Constructors"},{"location":"api/sector/sector-unit/#properties","text":"Name Summary informationTechnology private String informationTechnology consumerDiscretionary private String consumerDiscretionary healthCare private String healthCare communicationServices private String communicationServices realEstate private String realEstate utilities private String utilities financials private String financials materials private String materials industrials private String industrials consumerStaples private String consumerStaples energy private String energy","title":"Properties"},{"location":"api/sector/sector-unit/#methods","text":"Name Summary getInformationTechnology private String getInformationTechnology() getConsumerDiscretionary private String getConsumerDiscretionary() getHealthCare private String getHealthCare() getCommunicationServices private String getCommunicationServices() getRealEstate private String getRealEstate() getUtilities private String getUtilities() getFinancials private String getFinancials() getMaterials private String getMaterials() getIndustrials private String getIndustrials() getConsumerStaples private String getConsumerStaples() getEnergy private String getEnergy()","title":"Methods"},{"location":"api/sector/sector/","text":"alphavantage / sector / Sector Sector \u00b6 public final class Sector extends Object implements Fetcher Access to Sector Performance Data Constructors \u00b6 Name Summary Sector public Sector(Config config) Properties \u00b6 Name Summary config private Config config builder private SectorRequest.Builder builder successCallback private Fetcher.SuccessCallback<SectorResponse> successCallback failureCallback private Fetcher.FailureCallback failureCallback Methods \u00b6 Name Summary onSuccess public Sector onSuccess(Fetcher.SuccessCallback<SectorResponse> callback) onFailure public Sector onFailure(Fetcher.FailureCallback callback) fetch public void fetch()","title":"Sector"},{"location":"api/sector/sector/#sector","text":"public final class Sector extends Object implements Fetcher Access to Sector Performance Data","title":"Sector"},{"location":"api/sector/sector/#constructors","text":"Name Summary Sector public Sector(Config config)","title":"Constructors"},{"location":"api/sector/sector/#properties","text":"Name Summary config private Config config builder private SectorRequest.Builder builder successCallback private Fetcher.SuccessCallback<SectorResponse> successCallback failureCallback private Fetcher.FailureCallback failureCallback","title":"Properties"},{"location":"api/sector/sector/#methods","text":"Name Summary onSuccess public Sector onSuccess(Fetcher.SuccessCallback<SectorResponse> callback) onFailure public Sector onFailure(Fetcher.FailureCallback callback) fetch public void fetch()","title":"Methods"},{"location":"api/timeseries/","text":"alphavantage-java \u00b6 alphavantage / timeseries Package alphavantage.timeseries \u00b6 Types \u00b6 Name Summary TimeSeries Access to Stock Time Series Data. class TimeSeries Packages \u00b6 Name Summary request package alphavantage.timeseries.request response package alphavantage.timeseries.response","title":"timeseries"},{"location":"api/timeseries/#alphavantage-java","text":"alphavantage / timeseries","title":"alphavantage-java"},{"location":"api/timeseries/#package-alphavantagetimeseries","text":"","title":"Package alphavantage.timeseries"},{"location":"api/timeseries/#types","text":"Name Summary TimeSeries Access to Stock Time Series Data. class TimeSeries","title":"Types"},{"location":"api/timeseries/#packages","text":"Name Summary request package alphavantage.timeseries.request response package alphavantage.timeseries.response","title":"Packages"}]}